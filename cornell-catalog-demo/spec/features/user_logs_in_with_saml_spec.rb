require 'spec_helper'

RSpec.feature "user logs in" do
  before do
  Rails.application.env_config["devise.mapping"] = Devise.mappings[:user] # If using Devise
  Rails.application.env_config["omniauth.auth"] = OmniAuth.config.mock_auth[:saml]
  end
  scenario "using netid via SAML" do
    stub_samlauth
    visit 'logins' 
    if ENV['SAML_IDP_TARGET_URL']
      expect(page).to have_link("Sign in with your netid")
      click_link "Sign in with your netid"
      expect(page).to have_content("Sign out")
    else
      expect(page).to_not have_link("Sign in with your netid")
    end
  end

  scenario "using netid from search history page" do
      stub_samlauth
      visit 'search_history' 
    if ENV['SAML_IDP_TARGET_URL'] && ENV['GOOGLE_CLIENT_ID']
      click_link "Sign in"
      expect(page).to have_link("Sign in with your netid")
      click_link "Sign in with your netid"
      expect(page).to have_content("Sign out")
      expect(page).to have_content("Search History")
    end
    if ENV['SAML_IDP_TARGET_URL'] && !ENV['GOOGLE_CLIENT_ID']
      click_link "Sign in"
      expect(page).to have_content("Sign out")
      expect(page).to have_content("Search History")
    end
  end

  def stub_samlauth
    # first, set OmniAuth to run in test mode
    OmniAuth.config.test_mode = true
    # then, provide a set of fake oauth data that
    # omniauth will use when a user tries to authenticate:
    OmniAuth.config.mock_auth[:saml] = OmniAuth::AuthHash.new({
      provider: "saml",
      "saml_resp" => saml_resp ,
      uid: "12345678910",
      extra: {raw_info: {} } ,
      info: {
        email: "ditester@example.com",
        name: ["Diligent Tester"],
        netid: "mjc12",
        groups: ["staff","student"],
        primary: ["staff"],
        first_name: "Diligent",
        last_name: "Tester"
      },
      credentials: {
        token: "abcdefg12345",
        refresh_token: "12345abcdefg",
        expires_at: DateTime.now
      }
    })
  end
  def saml_resp
params = {"SAMLResponse"=>""}
  end
end
